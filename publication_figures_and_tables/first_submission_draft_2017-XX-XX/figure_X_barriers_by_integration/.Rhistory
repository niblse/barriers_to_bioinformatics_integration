question.column.name.short,
"_by_",
category.column.name.short,
".csv",
sep = "")
)
write.csv(raw.scored.analysis.df, file = raw.score.counts.by.category.filename)
# calculate raw score totals and preserve row names
raw.scored.analysis.tallied.df <- raw.scored.analysis.df%>%
mutate_if(is.character,as.numeric)%>%
mutate("Totals_in_all_categories" = Reduce("+",.[1:(length(category.levels))]))
rownames(raw.scored.analysis.tallied.df) <-column.nice.names.f
raw.scored.analysis.tallied.df$Barrier <- rownames(raw.scored.analysis.tallied.df)
return(raw.scored.analysis.tallied.df)
}
#tally up the number of individuals reponding in a given category of barrier
raw.scored.analysis.tallied.df <- raw.score.analysis(category.raw.scored.df,
category.levels,
file.name.switch = 0,
category.raw.scored.columns.nice.names)
#plot raw score tallies
plot.tallied.scored <- function(raw.scored.analysis.tallied.df,
question.column.name.nice,
n.respondents ,
file.name.switch = 0
){
raw.scored.analysis.tallied.df.plot.title <- paste(" Absolute number of issues scored across all categories\n",
question.column.name.nice,
"\n",
"n=",
n.respondents
)
raw.scored.analysis.tallied.df%>%
ggplot()+
aes(x= reorder(Barrier,Totals_in_all_categories), y= Totals_in_all_categories)+
#scale_x_discrete(limits = positions)+
coord_flip()+
ylab("number of issues scored")+
xlab("percived barriers as scored")+
ggtitle(raw.scored.analysis.tallied.df.plot.title)+
geom_bar(stat = "identity")+
theme_minimal()
ifelse(file.name.switch == 0,
raw.scored.analysis.tallied.df.plot.filename <- paste("tally_of_raw_coded_barriers_all_categories",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
,
raw.scored.analysis.tallied.df.plot.filename <- paste("tally_of_reduced_coded_barriers_all_categories",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
)
ggsave(paste(plot.dir.path,raw.scored.analysis.tallied.df.plot.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in")
}
#plot number of respondents by barriers (all categories)
#plot.tallied.scored(raw.scored.analysis.tallied.df,
#                    question.column.name.nice,
#                    file.name.switch = 0,
#                    n.respondents)
########### Calculate indiviual proportion of users reporting idenifying with a barrier
proportional.responses <- function(df,
category.levels,
response.counts.by.category,
table.dir.path,
question.column.name.safe,
category.column.name.safe,
col.order
){
#crate new df from raw.scored.analysis.df and change column names to category key names (safe)
raw.scored.analysis.df <- df[,1:(length(category.levels))]
raw.scored.analysis.wkey.df <- raw.scored.analysis.df
colnames(raw.scored.analysis.wkey.df) <- category.levels
#remake df according to prefered order
raw.scored.analysis.wkey.df.tmp <- raw.scored.analysis.wkey.df%>%
select(one_of(col.order))
rownames(raw.scored.analysis.wkey.df.tmp) <- rownames(raw.scored.analysis.wkey.df)
raw.scored.analysis.wkey.df <- raw.scored.analysis.wkey.df.tmp
#melt and transpose and make "value" column numeric, preserving column name
raw.scored.analysis.wkey.df <- t(raw.scored.analysis.wkey.df)
raw.scored.analysis.wkey.df <- melt(as.matrix(raw.scored.analysis.wkey.df))
raw.scored.analysis.wkey.df$value <- as.numeric(as.character(raw.scored.analysis.wkey.df$value))
#Caculate percentages of responses in barrier category attribitable to stratification category
# add summed_score column with this value
responses.summed.by.barriers <- raw.scored.analysis.wkey.df %>%
group_by(Var2)%>%
mutate(summed_score = sum(as.numeric(as.character(value))))%>%
mutate(percentage = (value / summed_score) * 100)
#add proportion calculation to barriers table where porpotion is out of total respondents
# in a category. e.g. if 100 answered 'Associates' to Q21 but 50 left a + comment in Q38
# then 50% of respondents at an Associates institution encountered a barrier
#modify response.counts.by.category df for this analysis
response.counts.df <- data.frame(response.counts.by.category["response_count",], stringsAsFactors = FALSE)
colnames(response.counts.df) <- response.counts.by.category["category_key",]
#create response column as factor
responses.summed.by.barriers$responses <- responses.summed.by.barriers$Var1
responses.summed.by.barriers$responses <- as.character(responses.summed.by.barriers$responses)
# replace responses with the number of responses in that category
for (category in category.levels) {
responses.summed.by.barriers$responses[responses.summed.by.barriers$responses == category] <- response.counts.df[,category]
}
responses.summed.by.barriers$responses <- as.numeric(as.character(responses.summed.by.barriers$responses))
# calculate the proportional response
proportional.responses.summed.by.barriers<- responses.summed.by.barriers %>%
mutate(proportion = value/responses)
#Add nice names to dataframe
proportional.responses.summed.by.barriers <- proportional.responses.summed.by.barriers%>%
mutate(nice_names = Var1)
proportional.responses.summed.by.barriers$nice_names <- as.character(proportional.responses.summed.by.barriers$nice_names)
# replace responses with the number of responses in that category
for (category in category.levels) {
proportional.responses.summed.by.barriers$nice_names[proportional.responses.summed.by.barriers$nice_names == category] <- nice.names.df[category, "rownames"]
}
proportional.responses.summed.by.barriers.filename <- paste(table.dir.path,
"tally_of_raw_score_of_",
question.column.name.short,
"_by_",
category.column.name.short,
"_proportions",
".csv",
sep = "")
write.csv(proportional.responses.summed.by.barriers,
file = proportional.responses.summed.by.barriers.filename)
return(proportional.responses.summed.by.barriers)
}
proportional.responses.summed.by.barriers <- proportional.responses(raw.scored.analysis.tallied.df,
category.levels,
response.counts.by.category,
table.dir.path,
question.column.name.safe,
category.column.name.safe,
col.order)
############# Return top5 barriers ##############################################################
top5.barriers.by.proportion <- function(df){
top.rows <- proportional.responses.summed.by.barriers%>%
arrange(desc(summed_score))%>%
distinct(Var2)%>%
head(n=5)
top.rows <- top.rows$Var2
proportional.responses.summed.by.barriers.top5 <- proportional.responses.summed.by.barriers%>%
filter(Var2 %in% top.rows)
return(proportional.responses.summed.by.barriers.top5)
}
proportional.responses.summed.by.barriers.top5 <- top5.barriers.by.proportion(proportional.responses.summed.by.barriers)
############# Plot top5 barriers ##############################################################
plot.of.top5.barriers <- function(df,
question.column.name.nice,
category.nice.name.lower,
n.respondents,
category.nice.name.caps,
question.column.name.safe,
category.column.name.safe
){
#setup ordering of plot
proportional.responses.summed.by.barriers.top5.plot <- df
proportional.responses.summed.by.barriers.top5.plot$Var2 <-
factor(proportional.responses.summed.by.barriers.top5.plot$Var2, levels =
proportional.responses.summed.by.barriers.top5.plot$Var2[order(desc(proportional.responses.summed.by.barriers.top5.plot$summed_score))])
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("_",
" ",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'X' with ','
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("X",
",",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'K' with ""
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("K",
"",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'D' with '-'
#proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("D",
#                                                                      "-",
#                                                                      proportional.responses.summed.by.barriers.top5.plot$nice_names)
#plot
proportional.responses.summed.by.barriers.top5.plot%>%
ggplot()+
aes(x=Var2, y=proportion, fill=Var1)+
geom_bar(stat = "identity", position = "dodge")+
labs(x = question.column.name.nice,
y = "percentage of respondents",
title = "Top 5 Most Commonly Reported Barriers to Including Bioinformatics",
subtitle = paste("Shown as percentage of respondents within each",
category.nice.name.lower,
"n=",n.respondents ))+
theme_minimal()+
theme(axis.text.x=element_text(angle=-20, hjust = 0, vjust = 1))+
scale_fill_discrete(name= category.nice.name.caps, labels=nice.lables.list)
proportional.responses.summed.by.barriers.top5.plot.filename <- paste("top_5_reported_barriers_proprotional_by_cat",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
ggsave(paste(plot.dir.path,proportional.responses.summed.by.barriers.top5.plot.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in")
}
#plot.of.top5.barriers(proportional.responses.summed.by.barriers.top5,
#                      question.column.name.nice,
#                      category.nice.name.lower,
#                      n.respondents,
#                      category.nice.name.caps,
#                      question.column.name.safe,
#                      category.column.name.safe)
########### Create new columns for proportion tests
proportion_table <- proportional.responses.summed.by.barriers%>%
mutate(positive_scored_response = value)%>%
mutate(null_scored_response = responses - value)
############ significantly Different Barriers Across Categories  #########################################
sig.diff.chi.analysis <- function(df){
# calculate chi-values (by proportion test) on each category and return significantly different barriers
proportional.responses.summed.by.barriers.grouped <- group_by(df, Var2)
proportional.responses.summed.by.barriers.grouped.prop <- proportional.responses.summed.by.barriers.grouped%>%
do(prop_test_chi_pvalue = prop.test(.$positive_scored_response,.$responses)$p.value)
proportional.sig.responses.summed.by.barriers.filename <- paste(table.dir.path,
"sig_diff_",
question.column.name.short,
"_barriers_by_",
category.column.name.short,
"_prop_test",
".csv",
sep = "")
write.csv(as.matrix(proportional.responses.summed.by.barriers.grouped.prop), file = proportional.sig.responses.summed.by.barriers.filename)
return(proportional.responses.summed.by.barriers.grouped.prop)
}
#calculate chi values
# remove NaN Values
proportion_table_non_zero <- proportion_table%>%
filter(summed_score != 0)
# for valid chi tests, remove scored categories where any scored category has less than 5 respondents
proportion_table_minimal_scoring <- proportion_table_non_zero%>%
group_by(Var2)%>%
filter(all(value >= 5))
#execute function to test for signifigance
proportional.sig.responses.summed.by.barriers <- sig.diff.chi.analysis(proportion_table_minimal_scoring)
# Add signifigance to proportion table
proportion_table_summary <- proportion_table_minimal_scoring%>%
group_by(Var2)%>%
left_join(., proportional.sig.responses.summed.by.barriers)
#coerce proportion test values into numeric forms
proportion_table_summary$prop_test_chi_pvalue <- as.numeric(proportion_table_summary$prop_test_chi_pvalue)
######Caclualte Margins of Error ####################################################################
# Interval estimate of population proportion at 95% confidence interval
proportion_table_summary <- proportion_table_summary%>%
mutate(proportion_error = as.numeric(sqrt((proportion * (1 - proportion)/responses))*qnorm(.975)))%>%
mutate(ymax = proportion + (proportion * proportion_error))%>%
mutate(ymin = proportion - (proportion * proportion_error))
#CREATE FRAME FOR SAVING
proportion_table_summary.filename <- paste(table.dir.path,
"sum_table_",
question.column.name.short,
"_by_",
category.column.name.short,
".csv",
sep = "")
write_csv(proportion_table_summary,path =  proportion_table_summary.filename)
######### POWER ANALYSIS #############################################################################
# Calculate possible effect size given 80% power for a chi.test statistic
effect.size <- round(pwr.chisq.test(w = NULL,
N = n.respondents,
df = (length(category.levels) - 1),
sig.level = 0.05,
power = 0.8)$w, digits = 3)
effect_statement <- if(effect.size <= .1){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting small effects [.1]", sep= "")
}else if (effect.size > .1 | effect.size <= .5){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting medium effects [.3]", sep= "")
}else if (effect.size >= .5){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting large effects [.5]", sep="" )
}
############ Plot significantly different barriers ####################################
plot.sig.barriers <- function(df,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe){
#significant barriers
sig.barriers <- df%>%
filter(prop_test_chi_pvalue <= 0.05)
sigs <- as.character(sig.barriers$Var2)
sigs <- c(sigs)
#plot significant barriers
#reformat Var2 names as chr
df$Var2 <- as.character(df$Var2)
proportional.sig.responses.summed.by.barriers.plot <-df%>%
filter(Var2 %in% sigs)
#setup plot ordering
proportional.sig.responses.summed.by.barriers.plot <- proportional.sig.responses.summed.by.barriers.plot
proportional.sig.responses.summed.by.barriers.plot$Var2 <-
factor(proportional.sig.responses.summed.by.barriers.plot$Var2, levels =
proportional.sig.responses.summed.by.barriers.plot$Var2[order(proportional.sig.responses.summed.by.barriers.plot$summed_score)])
#plot
# create legend lables that show the value of n for a stratfying category
legend.labels <- df%>%
ungroup()%>%
select(nice_names, responses)%>%
head(., n = length(category.levels))%>%
mutate(legend = paste(nice_names, " (","n=", responses,")", sep = ""))
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
legend.labels$legend <- gsub("_",
" ",
legend.labels$legend)
#replace 'X' with ','
legend.labels$legend <- gsub("X",
",",
legend.labels$legend)
#replace 'K' with ""
legend.labels$legend <- gsub("K",
"",
legend.labels$legend)
#replace 'D' with '-'
#legend.labels$legend <- gsub("D",
#                             "-",
#                             legend.labels$legend)
# create labels that show how many positive (coded) responses
x.labels <- proportional.sig.responses.summed.by.barriers.plot%>%
arrange(desc(summed_score))%>%
select(Var2, summed_score)%>%
distinct(Var2, .keep_all = TRUE)%>%
mutate(x.labels = paste(Var2, " \n(", "N(cr+)=", summed_score, ")", sep = ""))
# get values of error bars
error.limits <- aes(ymax = proportional.sig.responses.summed.by.barriers.plot$ymax, ymin = proportional.sig.responses.summed.by.barriers.plot$ymin)
error.dodge <- position_dodge(width=0.9)
greys <- c("#252525",
"#636363",
"#969696",
"#DCDCDC")
proportional.sig.responses.summed.by.barriers.plot%>%
ggplot()+
aes(x=Var2, y=proportion, fill=Var1)+
geom_bar(stat = "identity", position = "dodge")+
labs(y = "percentage of respondents", x= "")+
theme(axis.text.x=element_text(angle=-20, hjust = 0, vjust = 1))+
scale_x_discrete(
labels = c(
'Institutional Issues:\nLack of inter-departmental cooperation',
'Student Issues:\nIntimidated by topic',
'Resource Issues:\nAccess to software',
'Student Issues:\nLack of interest',
'Student Issues:\nLack of background skills/knowledge'))+
#scale_x_discrete(labels = x.labels$x.labels)+
geom_errorbar(error.limits, position = error.dodge, width = .2)+
theme_gray(base_size = 20, base_family = "sans")+
theme(line = element_line(colour = "black"), rect = element_rect(fill = "white",linetype = 0, colour = NA))+
theme(legend.background = element_rect(), legend.position = "bottom", legend.direction = "horizontal", legend.box = "vertical")+
theme(panel.grid.major =
element_line(colour = "grey"),
panel.grid.minor = element_blank(),
# unfortunately, can't mimic subtitles
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
strip.background = element_rect())+
theme(plot.background = element_rect(fill = "white"))+
theme(panel.background = element_rect(fill = "white"))+
theme(panel.grid.major.y = element_blank())+
theme(axis.line = element_line(colour = "black"))+
coord_flip()+
scale_fill_manual(values = greys, name= "Bioinformatics Integration\nIn Teaching", labels= legend.labels$legend)+
guides(fill=guide_legend(nrow =3))+
theme(panel.grid.minor=element_blank())
proportional.sig.responses.summed.by.barriers.plot.filename <- paste("barriers_differing_significantly_by_category_proprotional_by_category",
question.column.name.short,
"by",
category.column.name.short,
"_BW_.png",
sep = "_")
ggsave(proportional.sig.responses.summed.by.barriers.plot.filename,
width = 13.8,
height = 8.81,
units = "in")
}
# plot significantly different responses
plot.sig.barriers(proportion_table_summary,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe)
############ Plot significantly different barriers ####################################
plot.sig.barriers <- function(df,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe){
#significant barriers
sig.barriers <- df%>%
filter(prop_test_chi_pvalue <= 0.05)
sigs <- as.character(sig.barriers$Var2)
sigs <- c(sigs)
#plot significant barriers
#reformat Var2 names as chr
df$Var2 <- as.character(df$Var2)
proportional.sig.responses.summed.by.barriers.plot <-df%>%
filter(Var2 %in% sigs)
#setup plot ordering
proportional.sig.responses.summed.by.barriers.plot <- proportional.sig.responses.summed.by.barriers.plot
proportional.sig.responses.summed.by.barriers.plot$Var2 <-
factor(proportional.sig.responses.summed.by.barriers.plot$Var2, levels =
proportional.sig.responses.summed.by.barriers.plot$Var2[order(proportional.sig.responses.summed.by.barriers.plot$summed_score)])
#plot
# create legend lables that show the value of n for a stratfying category
legend.labels <- df%>%
ungroup()%>%
select(nice_names, responses)%>%
head(., n = length(category.levels))%>%
mutate(legend = paste(nice_names, " (","n=", responses,")", sep = ""))
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
legend.labels$legend <- gsub("_",
" ",
legend.labels$legend)
#replace 'X' with ','
legend.labels$legend <- gsub("X",
",",
legend.labels$legend)
#replace 'K' with ""
legend.labels$legend <- gsub("K",
"",
legend.labels$legend)
#replace 'D' with '-'
#legend.labels$legend <- gsub("D",
#                             "-",
#                             legend.labels$legend)
# create labels that show how many positive (coded) responses
x.labels <- proportional.sig.responses.summed.by.barriers.plot%>%
arrange(desc(summed_score))%>%
select(Var2, summed_score)%>%
distinct(Var2, .keep_all = TRUE)%>%
mutate(x.labels = paste(Var2, " \n(", "N(cr+)=", summed_score, ")", sep = ""))
# get values of error bars
error.limits <- aes(ymax = proportional.sig.responses.summed.by.barriers.plot$ymax, ymin = proportional.sig.responses.summed.by.barriers.plot$ymin)
error.dodge <- position_dodge(width=0.9)
niblse_4_color <- c("#0C774C",
"#124671",
"#AF6D12",
"#AF4112")
proportional.sig.responses.summed.by.barriers.plot%>%
ggplot()+
aes(x=Var2, y=proportion, fill=Var1)+
geom_bar(stat = "identity", position = "dodge")+
labs(y = "percentage of respondents", x= "")+
theme(axis.text.x=element_text(angle=-20, hjust = 0, vjust = 1))+
scale_x_discrete(
labels = c(
'Institutional Issues:\nLack of inter-departmental cooperation',
'Student Issues:\nIntimidated by topic',
'Resource Issues:\nAccess to software',
'Student Issues:\nLack of interest',
'Student Issues:\nLack of background skills/knowledge'))+
#scale_x_discrete(labels = x.labels$x.labels)+
geom_errorbar(error.limits, position = error.dodge, width = .2)+
theme_gray(base_size = 20, base_family = "sans")+
theme(line = element_line(colour = "black"), rect = element_rect(fill = "white",linetype = 0, colour = NA))+
theme(legend.background = element_rect(), legend.position = "bottom", legend.direction = "horizontal", legend.box = "vertical")+
theme(panel.grid.major =
element_line(colour = "grey"),
panel.grid.minor = element_blank(),
# unfortunately, can't mimic subtitles
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), "lines"),
strip.background = element_rect())+
theme(plot.background = element_rect(fill = "white"))+
theme(panel.background = element_rect(fill = "white"))+
theme(panel.grid.major.y = element_blank())+
theme(axis.line = element_line(colour = "black"))+
coord_flip()+
scale_fill_manual(values = niblse_4_color, name= "Bioinformatics Integration\nIn Teaching", labels= legend.labels$legend)+
guides(fill=guide_legend(nrow =3))+
theme(panel.grid.minor=element_blank())
proportional.sig.responses.summed.by.barriers.plot.filename <- paste("barriers_differing_significantly_by_category_proprotional_by_category",
question.column.name.short,
"by",
category.column.name.short,
"_Color_.png",
sep = "_")
ggsave(proportional.sig.responses.summed.by.barriers.plot.filename,
width = 13.8,
height = 8.81,
units = "in")
}
# plot significantly different responses
plot.sig.barriers(proportion_table_summary,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe)
View(proportion_table_summary)
