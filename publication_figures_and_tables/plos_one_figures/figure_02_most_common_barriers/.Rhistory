select(date, bases)
plot(sra.df)
View(sra.df)
as.Date(sra.df$date)
?as.Date
as.Date(sra.df$date, format = "%m/%d/%Y")
sra.df$date <- as.Date(sra.df$date, format = "%m/%d/%Y")
plot(sra.df)
sra.df <- sra.df%>%
filter(date >= "2007-01-01" & date <= "2016-12-31" )
#check plot
plot(sra.df)
?lm
lm(log(sra.df$bases ~ sra.df$date))
sra.df$date <- as.numeric(as.POSIXct(sra.df$date))
?as.POSIXct
#check plot
plot(sra.df)
lm(log(sra.df$bases ~ sra.df$date))
summary(sra.df)
typeof(sra.df$date)
typeof(sra.df$bases)
#read data
sra.df <- read_csv("~/Desktop/sra_stat.csv")
#select dates and SRA total bases
sra.df <- sra.df%>%
select(date, bases)
#convert to date format
sra.df$date <- as.Date(sra.df$date, format = "%m/%d/%Y")
#check plot
plot(sra.df)
#select the dates between January 1, 2007 and December 31st, 2016
sra.df <- sra.df%>%
filter(date >= "2007-01-01" & date <= "2016-12-31" )
plot(sra.df)
fit <- lm(formula = log(sra.df$bases) ~ log(sra.df$date))
fit <- lm(formula = log(sra.df$bases) ~ sra.df$date)
fit <- lm(formula = sra.df$bases ~ sra.df$date)
fit <- lm(formula = log(sra.df$bases) ~ sra.df$date)
abline(fit)
names(fit)
fit$coefficients
plot(abline(fit))
plot(sra.df)
?lm
log(2)/fit$coefficients[2]
?abline()
abline(fit)
plot(sra.df)
abline(fit)
abline(lm(formula = log(sra.df$bases) ~ sra.df$date))
fit <- lm(formula = log(sra.df$bases) ~ sra.df$date)
# load required libraries
require(ggplot2)
require(tidyverse)
require(reshape2)
require(pwr)
require(gplots)
require(corrplot)
sessionInfo()
plot(mtcars)
plot(iris)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("devtools")
devtools::install_github("pachterlab/sleuth")
help(package="sleuth")
vignette('intro', package = 'sleuth')
help(package="sleuth")
sleuth::sleuth_prep(sample_to_covariates = )
sessionInfo()
sleuth::design_matrix(so)
s2c
sleuth::s2c
help(package="sleuth")
data <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv)
data <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv)
data <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv")
data <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv")
data <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv")
data_cv <- read.csv("/Users/williams/Desktop/cyverse_user_portal.csv")
head(data_cv$research_area)
table(as.factor(data_cv$research_area))
sort(table(as.factor(data_cv$research_area)))
research_areas <- sort(table(as.factor(data_cv$research_area)))
write.csv(research_areas, file = "cyverse_research_areas.csv")
write.csv(research_areas, file = "/Users/williams/Desktop/cyverse_research_areas.csv")
data_cv_2 <- read.csv("Users/williams/Desktop/cyverse_users16-17.csv")
data_cv_2 <- read.csv("Users/williams/Desktop/cyverse_users16-17.csv")
data_cv_2 <- read.csv("/Users/williams/Desktop/cyverse_users16-17.csv")
research_areas <- sort(table(as.factor(data_cv_2$research_area)))
head(research_areas)
research_areas
write.csv(research_areas, file = "/Users/williams/Desktop/cyverse_research_areas_16-17.csv")
library(tidyverse)
dataset <- read_csv("~/Desktop/cyverse_user_portal.csv")
colnames(dataset)
table(as.factor(dataset$occupation))
usertypes <- table(as.factor(dataset$occupation))
usertypes <- as.data.frame(table(as.factor(dataset$occupation)))
View(usertypes)
usertypes.sorted <- arrange(usertypes.sorted)
View(usertypes)
usertypes.sorted <- arrange(usertypes$Freq)
View(usertypes)
usertypes.sorted <- arrange(usertypes, usertypes$Freq)
View(usertypes.sorted)
usertypes.percentage <- usertypes.sorted%>%
mutate(percentage = Freq/(sum(usertypes.sorted$Freq))
usertypes.percentage <- usertypes.sorted%>%
mutate(percentage = Freq/(sum(usertypes.sorted$Freq)))
usertypes.percentage <- usertypes.sorted%>%
mutate(percentage = Freq / (sum(usertypes.sorted$Freq)))
View(usertypes.percentage)
usertypes.percentage <- usertypes.sorted%>%
mutate(percentage = (Freq / (sum(usertypes.sorted$Freq))*100))
usertypes.percentage%>%
ggplot()+
geom_bar(data = usertypes.percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(data = usertypes.percentage, x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(y= Var, x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(y= Var1, x= percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(y= usertypes.percentage$Var1, x= usertypes.percentage$percentage, position = "stack")
usertypes.percentage%>%
ggplot()+
geom_bar(y= usertypes.percentage$Var1, x= usertypes.percentage$percentage, position = "stack", stat = "identity")
usertypes.percentage%>%
ggplot()+
geom_bar(y= usertypes.percentage$Var1, x= usertypes.percentage$percentage, position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
geom_bar(x= usertypes.percentage$percentage, position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, y=Var2)+
geom_bar(position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, y=Var2)+
geom_bar(position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, y=Var1)+
geom_bar(position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(y=percentage, fill=Var1)+
geom_bar(position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, fill=Var1)+
geom_bar(position = "stack", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, fill=Var1)+
geom_bar(position = "dodge", stat = "count")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, fill=Var1)+
geom_bar(position = "dodge", stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(x=percentage, y=Var1, fill=Var1)+
geom_bar(position = "dodge", stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=percentage, x=Var1, fill=Var1)+
geom_bar(position = "dodge", stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=percentage, x=Var1, fill=Var1)+
geom_bar(position = "stack", stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=Var1, x=percentage, fill=Var1)+
geom_bar(position = "stack", stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=Var1, x=percentage, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=Var1, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(x=Var1, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=Var1, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=Var1, x=percentage, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=percentage, fill=Var1)+
geom_bar( stat = "identity")
usertypes.percentage%>%
ggplot()+
aes(y=percentage, x=Var1, fill=Var1)+
geom_bar( stat = "identity")
View(dataset)
dataset$date_joined
min(dataset$date_joined)
events <- read_csv("~/Desktop/events.csv")
table(as.factor(events$`Institution/Event`))
levels(as.factor(events$`Institution/Event`))
users <- read_csv("~/Desktop/cyverse_users16-17.csv")
users$occupation
users_table <- as.data.frame(table(as.factor(users$occupation)))
View(users_table)
users_table <- users_table%>%
mutate(percent = (Freq/sum(Freq))*100)
hours_per_day <- c(10,10,15,10,6)
names(hours_per_day) <- c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")
hours_per_day <- c(10,10,15,10,6)
names(hours_per_day) <- c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")
hours_per_day[c("monday")]
hours_per_day <- c(10,10,15,10,6)
names(hours_per_day) <- c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")
hours_per_day[1]
hours_per_day[1]
hours_per_day[2]
hours_per_day["Tuesday"]
hours_per_day["Tuesday"]
# When creating factors that are ordinal, you can specify by passing a levels vector
temprature_vector <- factor(c("High",
"Low",
"Medium",
"High",
"Low",
"Medium"),
ordered = TRUE,
levels = c("Low", "Medium", "High"))
temprature_vector
you can name items in a list
## Vector with numerics from 1 up to 10
my_vector <- 1:10
## Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
## First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
## Adapt list() call to give the components names
my_list <- list(my_vector, my_matrix, my_df)
names(my_list) <- c("vec", "mat", "my_df")
## Print out my_list
my_list
## at creation you can pass the list names unquoted
my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list
lapply(list(1,2,3), function(x){3 * x})
?unlist
Sys.Date()
time <- Sys.Date()
time
my_data <- as.Data("1980-02-02")
my_date <- as.Date("1980-02-02")
my_date <- as.Date("1980-02-02", format = "%Y-%m-%d")
one-day-later <- my_date +1
one-day-later <- my_date + 1
one-day-later <- my_date + 1
my_date + 1
my_date + 1
onedaylater<- my_date + 1
?strptime
?collector
??collector
options() # shows global options
options() # shows global options
#Summary of  Most Commonly Reported Barriers by Category (n=1231)
# load required libraries
require(ggplot2)
require(tidyverse)
require(ggthemes)
require(scales)
total.scored.cols <- read_csv("../../../analysis_scripts/top5_plots/ouput_tables/scored_values.csv")
sample.size <- 1231
reds<- c("#F6001D","#B40015","#68000C","#68000C","#FB697A")
greens <- c("#2EDB00","#135B00","#219E00","#4AE821","#80EE64")
yellows <- c("#FFC300", "#BC9000", "#6C5300", "#FFCC24", "#FFDC6B")
blues <- c("#766FDF","#1A10BA", "#120B83", "#08044C", "#4037D2" )
greys <- c("#252525",
"#636363",
"#969696",
"#bdbdbd",
"#d9d9d9",
"#f7f7f7")
cshl_blue<-c("#153360",
"#28497B",
"#405F8E",
"#627DA7",
"#95ABCB",
"#A8B9D3")
#plot q33 scored by itself
label.df.s.33 <- list("q1.Q33" = "Q33: What do you think are the most important challenges currently facing those educating\n undergraduate life scientists in bioinformatics?")
facet_labeller.score.33 <- function(variable,value){
return(label.df.s.33[value])
}
# filter out Q33 and order for plotting
total.scored.cols <- total.scored.cols%>%
filter(question == "q1.Q33")%>%
filter(percentage >= 0.05)%>%
group_by(question)%>%
arrange(.,desc(percentage))
#adjust labels for clarity
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Expertise/training"] <- "Faculty Issues:  Lack of expertise/training"
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Time"] <- "Faculty Issues: Lack of time"
total.scored.cols$barrier <- factor(total.scored.cols$barrier, levels = total.scored.cols$barrier[order(desc(total.scored.cols$percentage))])
color_values <- c(reds[1], greens[1:2], reds[2], blues[1:2])
total.scored.cols%>%
ggplot()+
aes(x = barrier, y=percentage, fill = barrier)+
geom_bar(stat = "identity", position = "dodge")+
facet_grid(~ question)+
xlab("Scored barrier categories")+
ylab("Percentage of respondents reporting barrier")+
scale_fill_discrete(name="Barrier categories")+
theme_fivethirtyeight(base_size = 30, base_family = "sans")+
theme(panel.background = element_rect(fill = "white"))+
theme(plot.background = element_rect(fill = "white"))+
theme(legend.background = element_rect(fill = "white"))+
theme(strip.text.y = element_blank())+
theme(strip.background = element_blank(),strip.text.x = element_blank())+
theme(axis.text.x = element_blank())+
theme(axis.text.y = element_blank())+
theme(legend.key.size = unit(1.5, 'lines'))+
geom_text(aes(label = paste0(round(percentage *100), "%"), y = percentage),
vjust =-.2, size = 10, color = "black")+
scale_x_discrete(breaks = NULL)+
guides(fill=guide_legend(ncol=2))+
theme(axis.line.y = element_line(colour = "black"))+
theme(axis.line.x = element_line(colour = "black"))+
scale_fill_manual(values= cshl_blue, name= "Barriers")+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())
ggsave( filename= "figure_02_cshl.png",
width = 18.8,
height = 10,
units = "in")
setwd("~/github/niblse/publication_figures_and_tables/first_submission_draft_2017-XX-XX/figure_02_most_common_barriers")
#Summary of  Most Commonly Reported Barriers by Category (n=1231)
# load required libraries
require(ggplot2)
require(tidyverse)
require(ggthemes)
require(scales)
total.scored.cols <- read_csv("../../../analysis_scripts/top5_plots/ouput_tables/scored_values.csv")
sample.size <- 1231
reds<- c("#F6001D","#B40015","#68000C","#68000C","#FB697A")
greens <- c("#2EDB00","#135B00","#219E00","#4AE821","#80EE64")
yellows <- c("#FFC300", "#BC9000", "#6C5300", "#FFCC24", "#FFDC6B")
blues <- c("#766FDF","#1A10BA", "#120B83", "#08044C", "#4037D2" )
greys <- c("#252525",
"#636363",
"#969696",
"#bdbdbd",
"#d9d9d9",
"#f7f7f7")
cshl_blue<-c("#153360",
"#28497B",
"#405F8E",
"#627DA7",
"#95ABCB",
"#A8B9D3")
#plot q33 scored by itself
label.df.s.33 <- list("q1.Q33" = "Q33: What do you think are the most important challenges currently facing those educating\n undergraduate life scientists in bioinformatics?")
facet_labeller.score.33 <- function(variable,value){
return(label.df.s.33[value])
}
# filter out Q33 and order for plotting
total.scored.cols <- total.scored.cols%>%
filter(question == "q1.Q33")%>%
filter(percentage >= 0.05)%>%
group_by(question)%>%
arrange(.,desc(percentage))
#adjust labels for clarity
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Expertise/training"] <- "Faculty Issues:  Lack of expertise/training"
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Time"] <- "Faculty Issues: Lack of time"
total.scored.cols$barrier <- factor(total.scored.cols$barrier, levels = total.scored.cols$barrier[order(desc(total.scored.cols$percentage))])
color_values <- c(reds[1], greens[1:2], reds[2], blues[1:2])
total.scored.cols%>%
ggplot()+
aes(x = barrier, y=percentage, fill = barrier)+
geom_bar(stat = "identity", position = "dodge")+
facet_grid(~ question)+
xlab("Scored barrier categories")+
ylab("Percentage of respondents reporting barrier")+
scale_fill_discrete(name="Barrier categories")+
theme_fivethirtyeight(base_size = 30, base_family = "sans")+
theme(panel.background = element_rect(fill = "white"))+
theme(plot.background = element_rect(fill = "white"))+
theme(legend.background = element_rect(fill = "white"))+
theme(strip.text.y = element_blank())+
theme(strip.background = element_blank(),strip.text.x = element_blank())+
theme(axis.text.x = element_blank())+
theme(axis.text.y = element_blank())+
theme(legend.key.size = unit(1.5, 'lines'))+
geom_text(aes(label = paste0(round(percentage *100), "%"), y = percentage),
vjust =-.2, size = 10, color = "black")+
scale_x_discrete(breaks = NULL)+
guides(fill=guide_legend(ncol=2))+
theme(axis.line.y = element_line(colour = "black"))+
theme(axis.line.x = element_line(colour = "black"))+
scale_fill_manual(values= cshl_blue, name= "Barriers")+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())
ggsave( filename= "figure_02_cshl.png",
width = 18.8,
height = 10,
units = "in")
#Summary of  Most Commonly Reported Barriers by Category (n=1231)
# load required libraries
require(ggplot2)
require(tidyverse)
require(ggthemes)
require(scales)
total.scored.cols <- read_csv("../../../analysis_scripts/top5_plots/ouput_tables/scored_values.csv")
sample.size <- 1231
reds<- c("#F6001D","#B40015","#68000C","#68000C","#FB697A")
greens <- c("#2EDB00","#135B00","#219E00","#4AE821","#80EE64")
yellows <- c("#FFC300", "#BC9000", "#6C5300", "#FFCC24", "#FFDC6B")
blues <- c("#766FDF","#1A10BA", "#120B83", "#08044C", "#4037D2" )
greys <- c("#252525",
"#636363",
"#969696",
"#bdbdbd",
"#d9d9d9",
"#f7f7f7")
cshl_blue<-c("#153360",
"#28497B",
"#405F8E",
"#627DA7",
"#95ABCB",
"#D3DDEC")
#plot q33 scored by itself
label.df.s.33 <- list("q1.Q33" = "Q33: What do you think are the most important challenges currently facing those educating\n undergraduate life scientists in bioinformatics?")
facet_labeller.score.33 <- function(variable,value){
return(label.df.s.33[value])
}
# filter out Q33 and order for plotting
total.scored.cols <- total.scored.cols%>%
filter(question == "q1.Q33")%>%
filter(percentage >= 0.05)%>%
group_by(question)%>%
arrange(.,desc(percentage))
#adjust labels for clarity
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Expertise/training"] <- "Faculty Issues:  Lack of expertise/training"
total.scored.cols$barrier[total.scored.cols$barrier == "Faculty Issues: Time"] <- "Faculty Issues: Lack of time"
total.scored.cols$barrier <- factor(total.scored.cols$barrier, levels = total.scored.cols$barrier[order(desc(total.scored.cols$percentage))])
color_values <- c(reds[1], greens[1:2], reds[2], blues[1:2])
total.scored.cols%>%
ggplot()+
aes(x = barrier, y=percentage, fill = barrier)+
geom_bar(stat = "identity", position = "dodge")+
facet_grid(~ question)+
xlab("Scored barrier categories")+
ylab("Percentage of respondents reporting barrier")+
scale_fill_discrete(name="Barrier categories")+
theme_fivethirtyeight(base_size = 30, base_family = "sans")+
theme(panel.background = element_rect(fill = "white"))+
theme(plot.background = element_rect(fill = "white"))+
theme(legend.background = element_rect(fill = "white"))+
theme(strip.text.y = element_blank())+
theme(strip.background = element_blank(),strip.text.x = element_blank())+
theme(axis.text.x = element_blank())+
theme(axis.text.y = element_blank())+
theme(legend.key.size = unit(1.5, 'lines'))+
geom_text(aes(label = paste0(round(percentage *100), "%"), y = percentage),
vjust =-.2, size = 10, color = "black")+
scale_x_discrete(breaks = NULL)+
guides(fill=guide_legend(ncol=2))+
theme(axis.line.y = element_line(colour = "black"))+
theme(axis.line.x = element_line(colour = "black"))+
scale_fill_manual(values= cshl_blue, name= "Barriers")+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())
ggsave( filename= "figure_02_cshl.png",
width = 18.8,
height = 10,
units = "in")
