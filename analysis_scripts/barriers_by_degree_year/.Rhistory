file.name.switch = 0,
n.respondents)
########### Calculate indiviual proportion of users reporting idenifying with a barrier
proportional.responses <- function(df,
category.levels,
response.counts.by.category,
table.dir.path,
question.column.name.safe,
category.column.name.safe,
col.order
){
#crate new df from raw.scored.analysis.df and change column names to category key names (safe)
raw.scored.analysis.df <- df[,1:(length(category.levels))]
raw.scored.analysis.wkey.df <- raw.scored.analysis.df
colnames(raw.scored.analysis.wkey.df) <- category.levels
#remake df according to prefered order
raw.scored.analysis.wkey.df.tmp <- raw.scored.analysis.wkey.df%>%
select(one_of(col.order))
rownames(raw.scored.analysis.wkey.df.tmp) <- rownames(raw.scored.analysis.wkey.df)
raw.scored.analysis.wkey.df <- raw.scored.analysis.wkey.df.tmp
#melt and transpose and make "value" column numeric, preserving column name
raw.scored.analysis.wkey.df <- t(raw.scored.analysis.wkey.df)
raw.scored.analysis.wkey.df <- melt(as.matrix(raw.scored.analysis.wkey.df))
raw.scored.analysis.wkey.df$value <- as.numeric(as.character(raw.scored.analysis.wkey.df$value))
#Caculate percentages of responses in barrier category attribitable to stratification category
# add summed_score column with this value
responses.summed.by.barriers <- raw.scored.analysis.wkey.df %>%
group_by(Var2)%>%
mutate(summed_score = sum(as.numeric(as.character(value))))%>%
mutate(percentage = (value / summed_score) * 100)
#add proportion calculation to barriers table where porpotion is out of total respondents
# in a category. e.g. if 100 answered 'Associates' to Q21 but 50 left a + comment in Q38
# then 50% of respondents at an Associates institution encountered a barrier
#modify response.counts.by.category df for this analysis
response.counts.df <- data.frame(response.counts.by.category["response_count",], stringsAsFactors = FALSE)
colnames(response.counts.df) <- response.counts.by.category["category_key",]
#create response column as factor
responses.summed.by.barriers$responses <- responses.summed.by.barriers$Var1
responses.summed.by.barriers$responses <- as.character(responses.summed.by.barriers$responses)
# replace responses with the number of responses in that category
for (category in category.levels) {
responses.summed.by.barriers$responses[responses.summed.by.barriers$responses == category] <- response.counts.df[,category]
}
responses.summed.by.barriers$responses <- as.numeric(as.character(responses.summed.by.barriers$responses))
# calculate the proportional response
proportional.responses.summed.by.barriers<- responses.summed.by.barriers %>%
mutate(proportion = value/responses)
#Add nice names to dataframe
proportional.responses.summed.by.barriers <- proportional.responses.summed.by.barriers%>%
mutate(nice_names = Var1)
proportional.responses.summed.by.barriers$nice_names <- as.character(proportional.responses.summed.by.barriers$nice_names)
# replace responses with the number of responses in that category
for (category in category.levels) {
proportional.responses.summed.by.barriers$nice_names[proportional.responses.summed.by.barriers$nice_names == category] <- nice.names.df[category, "rownames"]
}
proportional.responses.summed.by.barriers.filename <- paste(table.dir.path,
"tally_of_raw_score_of_",
question.column.name.short,
"_by_",
category.column.name.short,
"_proportions",
".csv",
sep = "")
write.csv(proportional.responses.summed.by.barriers,
file = proportional.responses.summed.by.barriers.filename)
return(proportional.responses.summed.by.barriers)
}
proportional.responses.summed.by.barriers <- proportional.responses(raw.scored.analysis.tallied.df,
category.levels,
response.counts.by.category,
table.dir.path,
question.column.name.safe,
category.column.name.safe,
col.order)
############# Return top5 barriers ##############################################################
top5.barriers.by.proportion <- function(df){
top.rows <- proportional.responses.summed.by.barriers%>%
arrange(desc(summed_score))%>%
distinct(Var2)%>%
head(n=5)
top.rows <- top.rows$Var2
proportional.responses.summed.by.barriers.top5 <- proportional.responses.summed.by.barriers%>%
filter(Var2 %in% top.rows)
return(proportional.responses.summed.by.barriers.top5)
}
proportional.responses.summed.by.barriers.top5 <- top5.barriers.by.proportion(proportional.responses.summed.by.barriers)
############# Plot top5 barriers ##############################################################
plot.of.top5.barriers <- function(df,
question.column.name.nice,
category.nice.name.lower,
n.respondents,
category.nice.name.caps,
question.column.name.safe,
category.column.name.safe
){
#setup ordering of plot
proportional.responses.summed.by.barriers.top5.plot <- df
proportional.responses.summed.by.barriers.top5.plot$Var2 <-
factor(proportional.responses.summed.by.barriers.top5.plot$Var2, levels =
proportional.responses.summed.by.barriers.top5.plot$Var2[order(desc(proportional.responses.summed.by.barriers.top5.plot$summed_score))])
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("_",
" ",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'X' with ','
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("X",
",",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'K' with ""
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("K",
"",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#replace 'D' with '-'
proportional.responses.summed.by.barriers.top5.plot$nice_names <- gsub("D",
"-",
proportional.responses.summed.by.barriers.top5.plot$nice_names)
#plot
proportional.responses.summed.by.barriers.top5.plot%>%
ggplot()+
aes(x=Var2, y=proportion, fill=Var1)+
geom_bar(stat = "identity", position = "dodge")+
labs(x = question.column.name.nice,
y = "percentage of respondents",
title = "Top 5 Most Commonly Reported Barriers to Including Bioinformatics",
subtitle = paste("Shown as percentage of respondents within each",
category.nice.name.lower,
"n=",n.respondents ))+
theme_minimal()+
theme(axis.text.x=element_text(angle=-20, hjust = 0, vjust = 1))+
scale_fill_discrete(name= category.nice.name.caps, labels=nice.lables.list)
proportional.responses.summed.by.barriers.top5.plot.filename <- paste("top_5_reported_barriers_proprotional_by_cat",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
ggsave(paste(plot.dir.path,proportional.responses.summed.by.barriers.top5.plot.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in")
}
plot.of.top5.barriers(proportional.responses.summed.by.barriers.top5,
question.column.name.nice,
category.nice.name.lower,
n.respondents,
category.nice.name.caps,
question.column.name.safe,
category.column.name.safe)
########### Create new columns for proportion tests
proportion_table <- proportional.responses.summed.by.barriers%>%
mutate(positive_scored_response = value)%>%
mutate(null_scored_response = responses - value)
############ significantly Different Barriers Across Categories  #########################################
sig.diff.chi.analysis <- function(df){
# calculate chi-values (by proportion test) on each category and return significantly different barriers
proportional.responses.summed.by.barriers.grouped <- group_by(df, Var2)
proportional.responses.summed.by.barriers.grouped.prop <- proportional.responses.summed.by.barriers.grouped%>%
do(prop_test_chi_pvalue = prop.test(.$positive_scored_response,.$responses)$p.value)
proportional.sig.responses.summed.by.barriers.filename <- paste(table.dir.path,
"sig_diff_",
question.column.name.short,
"_barriers_by_",
category.column.name.short,
"_prop_test",
".csv",
sep = "")
write.csv(as.matrix(proportional.responses.summed.by.barriers.grouped.prop), file = proportional.sig.responses.summed.by.barriers.filename)
return(proportional.responses.summed.by.barriers.grouped.prop)
}
#calculate chi values
# remove NaN Values
proportion_table_non_zero <- proportion_table%>%
filter(summed_score != 0)
# for valid chi tests, remove scored categories where any scored category has less than 5 respondents
proportion_table_minimal_scoring <- proportion_table_non_zero%>%
group_by(Var2)%>%
filter(all(value >= 5))
#execute function to test for signifigance
proportional.sig.responses.summed.by.barriers <- sig.diff.chi.analysis(proportion_table_minimal_scoring)
# Add signifigance to proportion table
proportion_table_summary <- proportion_table_minimal_scoring%>%
group_by(Var2)%>%
left_join(., proportional.sig.responses.summed.by.barriers)
#coerce proportion test values into numeric forms
proportion_table_summary$prop_test_chi_pvalue <- as.numeric(proportion_table_summary$prop_test_chi_pvalue)
######Caclualte Margins of Error ####################################################################
# Interval estimate of population proportion at 95% confidence interval
proportion_table_summary <- proportion_table_summary%>%
mutate(proportion_error = as.numeric(sqrt((proportion * (1 - proportion)/responses))*qnorm(.975)))%>%
mutate(ymax = proportion + (proportion * proportion_error))%>%
mutate(ymin = proportion - (proportion * proportion_error))
#CREATE FRAME FOR SAVING
proportion_table_summary.filename <- paste(table.dir.path,
"sum_table_",
question.column.name.short,
"_by_",
category.column.name.short,
".csv",
sep = "")
write_csv(proportion_table_summary,path =  proportion_table_summary.filename)
######### POWER ANALYSIS #############################################################################
# Calculate possible effect size given 80% power for a chi.test statistic
effect.size <- round(pwr.chisq.test(w = NULL,
N = n.respondents,
df = (length(category.levels) - 1),
sig.level = 0.05,
power = 0.8)$w, digits = 3)
effect_statement <- if(effect.size <= .1){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting small effects [.1]", sep= "")
}else if (effect.size > .1 | effect.size <= .5){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting medium effects [.3]", sep= "")
}else if (effect.size >= .5){
paste("Question effect size at 80% power is ",effect.size, ", sufficent for detecting large effects [.5]", sep="" )
}
############ Plot significantly different barriers ####################################
plot.sig.barriers <- function(df,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe){
#significant barriers
sig.barriers <- df%>%
filter(prop_test_chi_pvalue <= 0.05)
sigs <- as.character(sig.barriers$Var2)
sigs <- c(sigs)
#plot significant barriers
#reformat Var2 names as chr
df$Var2 <- as.character(df$Var2)
proportional.sig.responses.summed.by.barriers.plot <-df%>%
filter(Var2 %in% sigs)
#setup plot ordering
proportional.sig.responses.summed.by.barriers.plot <- proportional.sig.responses.summed.by.barriers.plot
proportional.sig.responses.summed.by.barriers.plot$Var2 <-
factor(proportional.sig.responses.summed.by.barriers.plot$Var2, levels =
proportional.sig.responses.summed.by.barriers.plot$Var2[order(desc(proportional.sig.responses.summed.by.barriers.plot$summed_score))])
#plot
# create legend lables that show the value of n for a stratfying category
legend.labels <- df%>%
ungroup()%>%
select(nice_names, responses)%>%
head(., n = length(category.levels))%>%
mutate(legend = paste(nice_names, " (","n=", responses,")", sep = ""))
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
legend.labels$legend <- gsub("_",
" ",
legend.labels$legend)
#replace 'X' with ','
legend.labels$legend <- gsub("X",
",",
legend.labels$legend)
#replace 'K' with ""
legend.labels$legend <- gsub("K",
"",
legend.labels$legend)
#replace 'D' with '-'
legend.labels$legend <- gsub("D",
"-",
legend.labels$legend)
# create labels that show how many positive (coded) responses
x.labels <- proportional.sig.responses.summed.by.barriers.plot%>%
arrange(desc(summed_score))%>%
select(Var2, summed_score)%>%
distinct(Var2, .keep_all = TRUE)%>%
mutate(x.labels = paste(Var2, " \n(", "N(cr+)=", summed_score, ")", sep = ""))
# get values of error bars
error.limits <- aes(ymax = proportional.sig.responses.summed.by.barriers.plot$ymax, ymin = proportional.sig.responses.summed.by.barriers.plot$ymin)
error.dodge <- position_dodge(width=0.9)
proportional.sig.responses.summed.by.barriers.plot%>%
ggplot()+
aes(x=Var2, y=proportion, fill=Var1)+
geom_bar(stat = "identity", position = "dodge")+
labs(x = question.column.name.nice,
y = "percentage of respondents",
title = paste("Barriers Differing Significantly by", category.nice.name.caps),
subtitle = paste("Shown as percentage of respondents within each ",
category.nice.name.lower,
" n=",n.respondents, "\n", effect_statement, sep = "" ))+
theme_minimal()+
theme(axis.text.x=element_text(angle=-20, hjust = 0, vjust = 1))+
scale_fill_discrete(name= category.nice.name.caps, labels = legend.labels$legend)+
scale_x_discrete(labels = x.labels$x.labels)+
geom_errorbar(error.limits, position = error.dodge, width = .2)
proportional.sig.responses.summed.by.barriers.plot.filename <- paste("barriers_differing_significantly_by_category_proprotional_by_category",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
ggsave(paste(plot.dir.path,proportional.sig.responses.summed.by.barriers.plot.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in")
}
# plot significantly different responses
plot.sig.barriers(proportion_table_summary,
category.df,
category.levels,
category.nice.name.caps,
category.nice.name.lower,
n.respondents,
question.column.name.safe,
category.column.name.safe)
pdf(NULL)
############## Analysis of Reduced Categories ##################################
# baloon plot of percentages of faculty reporting barrier by stratafying category
#get tallies for reduced columns
reduced.tally.df <- raw.score.analysis(category.reduced.df,
category.levels,
file.name.switch = 1,
category.reduced.columns.nice.names)
# Select relavant columns and ensure values are numeric
reduced.tally.df <- as.matrix(reduced.tally.df[,1:(length(reduced.tally.df)-2)])
reduced.tally.df <- reduced.tally.df%>%
as.data.frame()%>%
select(one_of(col.order2))%>%
as.matrix()
#convert reponse numbers to percentages
#get denominators (number of responses for each stratafying category)
responses.n.for.all.categories <- proportional.responses.summed.by.barriers%>%
ungroup()%>%
select(responses, nice_names)%>%
head(.,n=length(category.levels))%>%
t()
colnames(responses.n.for.all.categories) <- responses.n.for.all.categories["nice_names",]
responses.n.for.all.categories <- head(responses.n.for.all.categories, n=1)
responses.n.for.all.categories[1,] <- as.numeric(responses.n.for.all.categories[1,])
#convert tally of reduced columns to percentages
for(categories in colnames(reduced.tally.df)){
denom <- as.numeric(responses.n.for.all.categories[,categories])
reduced.tally.df[,categories] <- round(((reduced.tally.df[,categories] / denom)*100), digits = 1)
}
#generate baloon plot
reduced.baloonplot.filename <- paste("reduced_baloonplot",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
# Create df for baloon plot
reduced.tally.df.baloon <- reduced.tally.df
#correct nice_names for plotting
#SUBSTITUTION
colnames(reduced.tally.df.baloon) <- chartr("XD",
",-",
colnames(reduced.tally.df.baloon))
colnames(reduced.tally.df.baloon) <- gsub("_",
" ",
colnames(reduced.tally.df.baloon))
colnames(reduced.tally.df.baloon) <- gsub("K",
"",
colnames(reduced.tally.df.baloon))
#reorder baloon df
png(filename = paste(plot.dir.path,reduced.baloonplot.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in",
res = 600)
balloonplot(as.table(reduced.tally.df.baloon),
main = paste("Percentages of Faculty Reporting", question.column.name.nice, "by", category.nice.name.caps,
"\n area proprotional to percentage", sep = " "),
show.margins = FALSE,
show.zeros = FALSE,
xlab = "Barriers",
ylab = category.nice.name.caps,
text.size = 0.7
)
dev.off()
pdf(NULL)
# Barplot
#transpose and restore dataframeness
reduced.tally.df.t <- t(reduced.tally.df)
reduced.tally.df.t <- data.frame(reduced.tally.df.t)
# Restore nice names
colnames(reduced.tally.df.t) <- category.reduced.columns.nice.names
#melt as matrix for plotting
reduced.tally.df.m <- melt(as.matrix(reduced.tally.df.t))
#correct nice_names for plotting
#SUBSTITUTION
#replace underscores with spaces
reduced.tally.df.m$Var1 <- gsub("_",
" ",
reduced.tally.df.m$Var1)
#replace 'X' with ','
reduced.tally.df.m$Var1 <- gsub("X",
",",
reduced.tally.df.m$Var1)
#replace 'K' with  ""
reduced.tally.df.m$Var1 <- gsub("K",
"",
reduced.tally.df.m$Var1)
#replace 'D' with -
reduced.tally.df.m$Var1 <- gsub("D",
"-",
reduced.tally.df.m$Var1)
#create plot
#convert percentages to decimal
reduced.tally.df.m.plot <- reduced.tally.df.m
reduced.tally.df.m.plot$value <- reduced.tally.df.m.plot$value/100
#setup ordering of plot
reduced.tally.df.m.plot$Var2 <-
factor(reduced.tally.df.m.plot$Var2, levels =
reduced.tally.df.m.plot$Var2[order(desc(reduced.tally.df.m.plot$value))])
reduced.tally.df.m.plot%>%
ggplot()+
aes(x= Var1, y = value, fill = Var2)+
geom_bar(stat="identity", position = "dodge")+
labs(x = category.column.name.nice,
y = "percentage of respondents",
title = paste("Percentages of Faculty Responding within Reduced Barrier Categories"),
subtitle = paste("Shown as percentage of respondents within each",
category.nice.name.lower,
"n=",n.respondents ))+
theme_minimal()+
scale_fill_discrete(name= "Reduced Barrier Categories")+
scale_x_discrete(limits = head(reduced.tally.df.m.plot$Var1, n = length(category.levels)))
reduced.summary.percentage.filename <- paste("reduced_category_barplot",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
ggsave(paste(plot.dir.path,reduced.summary.percentage.filename, sep= ""),
width = 13.8,
height = 8.81,
units = "in")
# Correlation plot
correlation.plot.filename <- paste("reduced_category_correlation",
question.column.name.short,
"by",
category.column.name.short,
".png",
sep = "_")
png(filename = paste(plot.dir.path,correlation.plot.filename, sep= ""),
width = 14,
height = 14,
units = "in",
res = 600)
reduced.tally.df.correlated <- cor(reduced.tally.df.t)
corrplot(reduced.tally.df.correlated,
order = "hclust",
tl.srt=45)
dev.off()
prop.test(x = c(1,3,4,5), n= c(10,10,10,10))
prop.test(x = c(6,6,8,5), n= c(10,10,10,10))
prop.test(x = c(6,6,8,5), n= c(10,10,10,10))
prop.test(x = c(.196,
.3,
.295,
.284,
.268),
n= c(51,
190,
284,
345,
149))
prop.test(x = c(10,
57,
84,
98,
40),
n= c(51,
190,
284,
345,
149))
prop.test(x = c(20,
57,
84,
98,
40),
n= c(51,
190,
284,
345,
149))
prop.test(x = c(45,
57,
84,
98,
40),
n= c(51,
190,
284,
345,
149))
prop.test(x = c(5,
57,
84,
98,
40),
n= c(51,
190,
284,
345,
149))
prop.test(x = c(4,
57,
84,
98,
40),
n= c(51,
190,
284,
345,
149))
